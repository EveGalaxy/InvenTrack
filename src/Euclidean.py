import mysql.connector
import numpy as np
import asyncio
from bleak import BleakScanner  # ‡πÉ‡∏ä‡πâ Bleak ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows/Linux/Mac

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '11223344',
    'database': 'demo_radiomap'
}

# üõú MAC Address ‡∏Ç‡∏≠‡∏á Beacon ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
BEACON_MAC = "D8:6F:B8:83:E6:55"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô MAC Address ‡∏à‡∏£‡∏¥‡∏á

# üõú ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô Beacon ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ RSSI
async def scan_beacon():
    devices = await BleakScanner.discover()
    for dev in devices:
        if dev.address == BEACON_MAC:
            print(f"üîπ Beacon ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß! RSSI = {dev.rssi} dBm")
            return dev.rssi  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ RSSI ‡∏Ç‡∏≠‡∏á Beacon

    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Beacon")
    return None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None

# üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Euclidean Distance ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ
def calculate_euclidean(current_rssi):
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor()

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RSSI ‡∏à‡∏≤‡∏Å MySQL
    sql = "SELECT slot, collect, rssi_nb1, rssi_nb2, rssi_nb3, rssi_nb4 FROM radiomap_slot;"
    cursor.execute(sql)
    results = cursor.fetchall()

    ed_list = []

    for row in results:
        slot, collect, nb1, nb2, nb3, nb4 = row
        
        # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NULL
        if None in (nb1, nb2, nb3, nb4):
            continue

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Euclidean Distance
        db_rssi = np.array([nb1, nb2, nb3, nb4])
        ed = np.linalg.norm(db_rssi - current_rssi)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ ED
        ed_list.append((slot, collect, ed))

    conn.close()

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ ED ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    ed_list.sort(key=lambda x: x[2])

    print("\nüîπ **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Euclidean Distance** üîπ")
    for slot, collect, ed in ed_list[:10]:  # ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        print(f"Slot {slot}, Collect {collect}, ED = {ed:.4f}")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async def main():
    rssi_value = await scan_beacon()  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ RSSI ‡∏à‡∏≤‡∏Å Beacon ‡∏à‡∏£‡∏¥‡∏á

    if rssi_value is not None:
        current_rssi = np.array([rssi_value, rssi_value, rssi_value, rssi_value])  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á 4 NB (‡∏´‡∏≤‡∏Å‡∏°‡∏µ 1 Beacon)
        calculate_euclidean(current_rssi)
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö Beacon")

# üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
asyncio.run(main())
